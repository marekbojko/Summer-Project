# -*- coding: utf-8 -*-
"""
Network metrics
"""

import networkx as nx
import numpy as np
import math


def mirr_matrix_coeff(A):
    s_x = np.empty(0)
    s_y = np.empty(0)
    for i in range(int(math.sqrt(np.size(A)))):
        for j in range(i+1,int(math.sqrt(np.size(A)))):
            s_x = np.append(s_x,A[i,j])
            s_y = np.append(s_y,A[j,i])
    return np.corrcoef(s_x,s_y)[0,1]
    
    
def adjacency_matrix(network):
    return nx.adjacency_matrix(network).todense()
    

def reciprocity_weighted_graph(network):
    recip_weight = 0
    total_weight = 0
    weight_matrix = adjacency_matrix(network)
    for i in range(int(math.sqrt(np.size(weighted_matrix)))):
        for j in range(int(math.sqrt(np.size(weighted_matrix)))):
            if i!=j:
                recip_weight += min(weighted_matrix[i,j],weighted_matrix[j,i])
                total_weight += weighted_matrix[i,j]
    return recip_weight/total_weight
    

    

